/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lcd_16x2.h"
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define led_port GPIOB
#define led_pin GPIO_PIN_8
#define coi_port GPIOB
#define coi_pin GPIO_PIN_7
#define mp2_port GPIOA
#define mp2_pin GPIO_PIN_2
#define button1_port GPIOB
#define button1_pin GPIO_PIN 1
#define button2_port GPIOB
#define button2_pin GPIO_PIN 2
#define button3_port GPIOA
#define button3_pin GPIO_PIN 7
char mang[20];
char tx_data[30], rx_data[30];
char data_goi[30] = "ATD0379189929;\r\n";
char sos[10];
uint32_t var = 0;
int nhiet_do = 0;
int m = 0;
int n = 0;
int value_canhbao;
int x;
int a;
int b;
int c;
int t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void goi(){
	char cmd[] = "AT\r\n";
  HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 3000);
	HAL_Delay(500);
	HAL_UART_Transmit(&huart1, (uint8_t*)data_goi, strlen(data_goi), 5000);
	HAL_Delay(15000);
	
	char cmd_1[] = "ATH\r\n";
  HAL_UART_Transmit(&huart1, (uint8_t *)cmd_1, strlen(cmd_1), 2000);
}

void nhan_tin(){
	char cmd[] = "AT\r\n";
  HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 3000);
	HAL_Delay(500);
	//============================================
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CMGF=1\r\n", 11, 1000);
	HAL_Delay(500);
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CNMI=2,2,0,0\r\n", 17,1000);
	HAL_Delay(500);
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CMGS=\"0379189929\"\r\n",22,3000);
	HAL_Delay(500);
	sprintf(tx_data, "Nha Sap Chay Roi!!!  %c", 0x1A);
	HAL_UART_Transmit(&huart1, (uint8_t*)tx_data, strlen(tx_data), 1000);
	HAL_Delay(5000);
	//===================================================================
	// Nhan tin sdt 2
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CMGS=\"0337526634\"\r\n",22,3000);
	HAL_Delay(500);
	sprintf(tx_data, "Nha Sap Chay Roi!!!  %c", 0x1A);
	HAL_UART_Transmit(&huart1, (uint8_t*)tx_data, strlen(tx_data), 1000);
	
}

void nhan_tin_2(){
	char cmd[] = "AT\r\n";
  HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 3000);
	HAL_Delay(500);
	//============================================
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CMGF=1\r\n", 11, 1000);
	HAL_Delay(500);
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CNMI=2,2,0,0\r\n", 17,1000);
	HAL_Delay(500);
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CMGS=\"0379189929\"\r\n",22,3000);
	HAL_Delay(500);
	sprintf(tx_data, "Nha Co Khoi  %c", 0x1A);
	HAL_UART_Transmit(&huart1, (uint8_t*)tx_data, strlen(tx_data), 1000);
	HAL_Delay(5000);
	//===================================================================
	// Nhan tin sdt 2
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CMGS=\"0337526634\"\r\n",22,3000);
	HAL_Delay(500);
	sprintf(tx_data, "Nha Co Khoi  %c", 0x1A);
	HAL_UART_Transmit(&huart1, (uint8_t*)tx_data, strlen(tx_data), 1000);
	
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
		Lcd_Init();
	
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
		
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	value_canhbao = 60;
	HAL_GPIO_WritePin(led_port, led_pin, 1);
  while (1)
  {
		if(HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == 0){
			while(HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == 0){}
			x++;
		}
		if(x >= 2){
			x = 0;
		}
		if(x == 0){
			m++;
			n = 0;
			if(m == 1){
				Lcd_clear_display();
			}
			Lcd_gotoxy(2,0);
	  	Lcd_write_string("HE THONG OFF");
		}
		if(x == 1){// HE THONG START
			m = 0;
			n++;
			if(n == 1){
				Lcd_clear_display();
			}
		if(HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == 0){
			while(HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == 0);
			value_canhbao++;
		}
		if(HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == 0){
			while(HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == 0){}
			value_canhbao--;
		}
		
		HAL_ADC_Start(&hadc1);
		HAL_Delay(50);
		var = HAL_ADC_GetValue(&hadc1);
		HAL_Delay(50);
		HAL_ADC_Stop(&hadc1);
		nhiet_do = var*3.3*100/4096;
		sprintf(mang, "Nhiet Do = %d", nhiet_do);
		sprintf(sos, "T: %d", value_canhbao);
		Lcd_gotoxy(2,0);
		Lcd_write_string(mang);
		Lcd_gotoxy(10,1);
		Lcd_write_string(sos);
		//====================================================================
		//Nhiet do cao
		if(nhiet_do > value_canhbao && HAL_GPIO_ReadPin(mp2_port, mp2_pin) == 1){
			a++;
			b = 0;
			c = 0;
			t = 0;
			HAL_Delay(1000);
			if(a == 4){
				Lcd_clear_display();
			}
			
			if(a == 5){
				Lcd_gotoxy(2,0);
	  	  Lcd_write_string(mang);
			  Lcd_gotoxy(0,1);
			  Lcd_write_string("Nhiet Cao");
			  HAL_GPIO_WritePin(coi_port, coi_pin, 0);
			  HAL_GPIO_WritePin(led_port, led_pin, 0);
				nhan_tin();
			}
		}
		
//============================================================
		// Co khoi
		if(nhiet_do < value_canhbao && HAL_GPIO_ReadPin(mp2_port, mp2_pin) == 0){
			t++;
			HAL_Delay(1000);
			if(t == 4){
				Lcd_clear_display();
			}
			if(t == 5){
				c = 0;
				a = 0;
				b = 0;
			 Lcd_gotoxy(2,0);
	  	 Lcd_write_string(mang);
			 Lcd_gotoxy(4,1);
			 Lcd_write_string("Co Khoi");
			 HAL_GPIO_WritePin(led_port, led_pin, 0);
			 HAL_GPIO_WritePin(coi_port, coi_pin, 0);
			 nhan_tin_2();
			}
			
		}
		
		// Nguy Hiem
		if(HAL_GPIO_ReadPin(mp2_port, mp2_pin) == 0 && nhiet_do > value_canhbao){
			b++;
			a = 0;
			c = 0;
			t = 0;
			if(b == 1){
				Lcd_clear_display();
			}
			Lcd_gotoxy(2,0);
	  	Lcd_write_string(mang);
			Lcd_gotoxy(4,1);
			Lcd_write_string("SOS");
			HAL_GPIO_WritePin(led_port, led_pin, 0);
			HAL_GPIO_WritePin(coi_port, coi_pin, 1);
			if(b == 2){
				nhan_tin();
				HAL_Delay(10000);
				goi();
			}
		}
//=============================================
		//an toan
		if(nhiet_do <= value_canhbao && HAL_GPIO_ReadPin(mp2_port, mp2_pin) == 1){
			c++;
			a = 0;
			b = 0;
			t = 0;
			if(c == 1){
				Lcd_clear_display();
			}
			
			Lcd_gotoxy(2,0);
	  	Lcd_write_string(mang);
			Lcd_gotoxy(0,1);
			Lcd_write_string("AN TOAN");
			HAL_GPIO_WritePin(led_port, led_pin, 1);
			HAL_GPIO_WritePin(coi_port, coi_pin, 0);
		}
		}
		
		
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : button3_Pin PA8 */
  GPIO_InitStruct.Pin = button3_Pin|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
